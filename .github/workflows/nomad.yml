---
name: Deploy Application to Nomad Cluster
on:
  workflow_call:
    inputs:
      cluster:
        required: true
        type: string
        description: Nomad Cluster/Datacenter Name
      environment:
        required: true
        type: string
        description: Application environment to deploy
      api_url:
        required: true
        type: string
        description: Nomad cluster API address
      image_name:
        required: true
        type: string
        description: Docker image to deploy to cluster
      run_plan:
        type: boolean
        description: Specify whether to plan nomad job to cluster
        default: false
      run_deploy:
        type: boolean
        description: Specify whether to deploy nomad job to cluster
        default: false
      variables_file_name:
        type: string
        description: Relative path to nomad_pack variable.
        default: ""
      config_file_name:
        type: string
        description: Relative path to nomad_pack variable.
        default: "nomad.hcl"
      op_secret_name:
        required: false
        type: string
        description: The item name in one password "secrets" vault for the cluster's nomad token.
      code_version:
        required: false
        type: string
        description: Application code version. Default value is the latest commit sha
        default: ""
      ts_client_id_secret_name:
        required: false
        type: string
        default: network.tailscale_oauth_github_client_id
        description: The item name in one password "secrets" vault for the tailscale client id.
      ts_client_secret_secret_name:
        required: false
        type: string
        default: network.tailscale_oauth_github_secret
        description: The item name in one password "secrets" vault for the tailscale client secret.
      nomad_version:
        required: false
        type: string
        default: "1.10.3"
        description: Hashicorp Nomad version to use
      os:
        description: "OS version to run the workflow on. If not provided, defaults to 'ubuntu-latest'"
        type: string
        default: ubuntu-latest
        required: false
    secrets:
      nomad_token:
        required: false
        description: "Nomad token for accessing Nomad cluster"
      slack_bot_token:
        required: true
        description: "Access token for Slack"
      op_service_account_token:
        required: false
        description: "OnePassword service account token"

jobs:
  slack-notify-start:
    if: ${{ github.event_name != 'pull_request' && inputs.run_deploy }}
    uses: remerge/workflows/.github/workflows/slack-notify.yml@main
    with:
      cluster: ${{ inputs.cluster }}
      status: running
    secrets:
      slack_bot_token: ${{ secrets.slack_bot_token }}

  nomad:
    runs-on: ${{ inputs.os }}
    steps:
      - name: Check if docker image is set
        if: ${{ inputs.run_deploy && inputs.image_name == '' }}
        shell: bash {0}
        run: exit 1
      - uses: actions/checkout@v4
        id: checkout

      - name: Setup `nomad`
        uses: hashicorp/setup-nomad@main
        id: setup-nomad
        with:
          version: ${{ inputs.nomad_version }}

      - name: Check for nomad_token input is set
        id: secret-check
        # perform secret check & put boolean result as an output
        shell: bash {0}
        env:
          TOKEN: ${{ secrets.nomad_token }}
        run: |
          if [ "${{ secrets.nomad_token }}" != '' ]; then
            echo "nomad_token_set=true" >> "$GITHUB_OUTPUT";
            echo "NOMAD_TOKEN=$TOKEN" >> "$GITHUB_ENV"
          else
            echo "nomad_token_set=false" >> "$GITHUB_OUTPUT";
          fi

      - name: Load nomad_token from 1password
        if: ${{ inputs.op_secret_name && steps.secret-check.outputs.nomad_token_set == 'false' }}
        uses: 1password/load-secrets-action@v2
        with:
          # Export loaded secrets as environment variables
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.op_service_account_token }}
          NOMAD_TOKEN: ${{ format('op://secrets/{0}/password', inputs.op_secret_name) }}
          TS_OAUTH_CLIENT_ID: ${{ format('op://secrets/{0}/password', inputs.ts_client_id_secret_name) }}
          TS_OAUTH_SECRET: ${{ format('op://secrets/{0}/password', inputs.ts_client_secret_secret_name) }}

      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ env.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ env.TS_OAUTH_SECRET }}
          use-cache: "true"
          tags: "tag:github"

      - name: command args
        env:
          VAR_FILE: ${{ inputs.variables_file_name }}
        run: |
          if [ -n "$VAR_FILE" ]; then
            echo "NOMAD_ARG=\"-var-file=${VAR_FILE}\"" >> "$GITHUB_ENV"
          fi

      - name: Validate Nomad Configurations
        id: nomad_validate
        env:
          NOMAD_TOKEN: ${{ env.NOMAD_TOKEN }}
          NOMAD_ADDR: ${{ inputs.api_url }}
          NOMAD_VAR_task_image: ${{ inputs.image_name }}
          NOMAD_VAR_cluster: ${{ inputs.cluster }}
          NOMAD_VAR_environment: ${{ inputs.environment }}
          NOMAD_VAR_git_workflow_run_id: ${{ github.run_id }}
          NOMAD_VAR_code_version: "${{ inputs.code_version || steps.checkout.outputs.commit }}"
        run: |
          nomad validate ${{ env.NOMAD_ARG }} ${{ inputs.config_file_name }}

      - name: Run Nomad Plan
        id: nomad_plan
        if: ${{ inputs.run_plan }}
        env:
          NOMAD_TOKEN: ${{ env.NOMAD_TOKEN }}
          NOMAD_ADDR: ${{ inputs.api_url }}
          NOMAD_VAR_task_image: ${{ inputs.image_name }}
          NOMAD_VAR_cluster: ${{ inputs.cluster }}
          NOMAD_VAR_environment: ${{ inputs.environment }}
          NOMAD_VAR_git_workflow_run_id: ${{ github.run_id }}
          NOMAD_VAR_code_version: "${{ inputs.code_version || steps.checkout.outputs.commit }}"
        run: |
          res=$(nomad job plan ${{ env.NOMAD_ARG }} \
           ${{ inputs.config_file_name }}) || ( [ $? -eq 1 ] && true)

          echo "${res}"
          res="${res//'%'/'%25'}"
          res="${res//$'\n'/'%0A'}"
          res="${res//$'\r'/'%0D'}"

          echo "stdout=$res" >> "$GITHUB_OUTPUT"

      - name: PR Comment
        if: ${{ github.event_name == 'pull_request' && inputs.run_plan }}
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.github_token}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Nomad Plan for ${{ inputs.cluster }} \n ${{ steps.nomad_plan.outputs.stdout }}`
            })

      - name: Create github deployment
        if: ${{ github.event_name != 'pull_request' && inputs.run_deploy }}
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          environment: ${{ inputs.environment }}
          token: "${{ github.token }}"

      - name: Deploy to Nomad
        id: nomad_deployment
        if: ${{ github.event_name != 'pull_request' && inputs.run_deploy }}
        env:
          NOMAD_TOKEN: ${{ env.NOMAD_TOKEN }}
          NOMAD_ADDR: ${{ inputs.api_url }}
          NOMAD_VAR_task_image: ${{ inputs.image_name }}
          NOMAD_VAR_cluster: ${{ inputs.cluster }}
          NOMAD_VAR_environment: ${{ inputs.environment }}
          NOMAD_VAR_git_workflow_run_id: ${{ github.run_id }}
          NOMAD_VAR_code_version: "${{ inputs.code_version || steps.checkout.outputs.commit }}"
        run: |
          nomad job run ${{ env.NOMAD_ARG }} -detach ${{ inputs.config_file_name }}

      - name: Update github deployment status
        if: ${{ github.event_name != 'pull_request' && inputs.run_deploy }}
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: "${{ steps.nomad_deployment.outcome }}"

  slack-notify-finish:
    if: ${{ always() && needs.nomad.result != 'skipped' && github.event_name != 'pull_request' && inputs.run_deploy }}
    needs: [nomad, slack-notify-start]
    uses: remerge/workflows/.github/workflows/slack-notify.yml@main
    with:
      cluster: ${{ inputs.cluster }}
      status: ${{ needs.nomad.result }}
      update_ts: ${{ needs.slack-notify-start.outputs.ts }}
    secrets:
      slack_bot_token: ${{ secrets.slack_bot_token }}
