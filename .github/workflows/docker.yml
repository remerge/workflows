---
name: Docker build (and push to GAR)

on:
  workflow_call:
    inputs:
      registry:
        type: string
        required: false
        default: "europe-west4-docker.pkg.dev"
        description: "Google Artifact registry"

      project:
        type: string
        required: false
        default: "artifact-registry-ff9b"
        description: "GCP project"

      # to be deprecated soon
      repo:
        type: string
        required: false
        description: "GCP project repository"

      repository:
        type: string
        required: false
        description: "GCP project repository"

      image:
        type: string
        required: true
        description: "Image name"

      tag:
        type: string
        required: false
        description: "Version tag"

      context:
        type: string
        required: false
        default: .
        description: "Docker build context"

      dockerfile:
        type: string
        required: false
        default: Dockerfile
        description: "Dockerfile"

      build-args:
        type: string
        required: false
        description: "Docker build arguments"

      push:
        type: boolean
        required: false
        default: true
        description: "Whether to push the image to the registry"

      os:
        description: "OS version to run the workflow on. If not provided, defaults to 'ubuntu-latest'"
        type: string
        default: ubuntu-latest
        required: false

      gen-cache-key:
        description: |
          "Key of a cache where previous steps generated files. If your project
          needs to generate files before building the Docker image, this has to
          be done in a job before calling this reusable workflow. This is a limit
          of GHA, as reusable workflows can't run as a step in a job, but always
          run as their own job. To share data between jobs, `actions/cache@v4`
          should be used to create a cache. This workflow can then access the cache
          and hence the generated files."
        type: string
        required: false

      gen-cache-path:
        description: |
          "Cached directory where previous steps generated files. This is to be
          provided in conjunction with `gen-cache-key` and tells this workflow
          which directory to mount the cache to."
        type: string
        required: false

      workload-identity-provider:
        type: string
        required: false # set to true after migration
        description: "Google Cloud Workload Identity provider"

      service-account:
        type: string
        required: false # set to true after migration
        description: "Google Cloud default service account"

      slack-channel:
        type: string
        required: false
        description: "Slack channel to post to"

      slack-thread-ts:
        type: string
        required: false
        description: "Slack thread timestamp"

      fetch-depth:
        type: number
        required: false
        default: 1
        description: "Fetch depth for git checkout"

    outputs:
      image:
        description: "Full path of produced image"
        value: ${{ jobs.build-and-push.outputs.image }}

    secrets:
      # to be deprecated soon
      deploy_user_ssh_key:
        required: false
        description: "Private key for deploy user to access private repos"

      ssh-private-key:
        required: false # set to true after migration
        description: "SSH key for access to private repositories"

      # to be deprecated soon
      gar_service_account_key:
        required: false
        description: "Google Artifact Registry service account key (JSON)"

      slack-token:
        required: false
        description: "Slack token for posting messages"

jobs:
  build-and-push:
    runs-on: ${{ inputs.os }}
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Set Variables
        env:
          WORKLOAD_IDENTITY_PROVIDER: ${{ inputs.workload-identity-provider }}
          SERVICE_ACCOUNT: ${{ inputs.service-account }}
        run: |
          if [ -n "$WORKLOAD_IDENTITY_PROVIDER" ] && [ -n "$SERVICE_ACCOUNT" ]; then
            use_workload_identify="true"
          else
            use_workload_identify="false"
          fi
          echo "use_workload_identify=$use_workload_identify" >> "$GITHUB_ENV"

      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.deploy_user_ssh_key }}

      - name: Update Git config
        run: |
          curl -L https://api.github.com/meta | jq -r '.ssh_keys | .[]' | sed -e 's/^/github.com /' >> ~/.ssh/known_hosts
          git config --global url."git@github.com:".insteadOf "https://github.com/"

      - if: ${{ inputs.gen-cache-key && inputs.gen-cache-path }}
        uses: actions/cache@v4
        with:
          key: ${{ inputs.gen-cache-key}}
          path: |
            ${{ inputs.gen-cache-path}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v

      # Auth with gar_service_account_key
      # to be deprecated
      - if: ${{ env.use_workload_identify == 'false' }}
        name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.gar_service_account_key }}

      - name: Sign in to Google Artifact Registry
        if: ${{ env.use_workload_identify == 'false' }}
        run: |
          docker login -u _json_key \
          --password-stdin ${{ inputs.registry }} < ${{ steps.auth.outputs.credentials_file_path }}

      # Auth with workload-identity
      # to become defacto
      - id: auth_with_workload_identity
        if: ${{ env.use_workload_identify == 'true' }}
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ inputs.workload-identity-provider }}
          service_account: ${{ inputs.service-account }}

      - uses: docker/login-action@v3
        if: ${{ env.use_workload_identify == 'true' }}
        with:
          registry: ${{ inputs.registry }}
          username: oauth2accesstoken
          password: ${{ steps.auth_with_workload_identity.outputs.access_token }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.project }}/${{ inputs.repo }}/${{ inputs.image }}
          tags: |
            type=sha
            ${{ inputs.tag }}

      - name: Build (and push) Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          push: ${{ inputs.push }}
          file: ${{ inputs.dockerfile }}
          build-args: |
            ${{ inputs.build-args }}
            CI_COMMIT=${{ github.sha }}
            CI_REPO=${{ github.event.repository.name }}
            CI_NUM=${{ github.run_id }}
            BUILD_COMMIT=${{ github.sha }}
            BUILD_REPO=${{ github.event.repository.name }}
            BUILD_ID=${{ github.run_id }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          ssh: default
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - uses: remerge/action-slack-deploy-pipeline@v2.0.0-remerge
        if: ${{ always() && inputs.slack-thread-ts != '' }}
        with:
          token: ${{ secrets.slack-token }}
          channel: ${{ inputs.slack-channel }}
          thread_ts: ${{ inputs.slack-thread-ts }}
