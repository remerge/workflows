---
name: Docker build (and push to GAR)

on:
  workflow_call:
    inputs:
      registry:
        type: string
        default: europe-west4-docker.pkg.dev
        description: Google Artifact Registry

      project:
        type: string
        default: artifact-registry-ff9b
        description: GCP project

      repo:
        type: string
        required: false
        description: Legacy GCP repository name (deprecated)

      repository:
        type: string
        required: false
        description: GCP Artifact Registry repository name

      image:
        type: string
        required: true
        description: Image name

      tag:
        type: string
        required: false
        description: Optional version tag (defaults to content hash)

      context:
        type: string
        default: .
        description: Docker build context

      target:
        type: string
        required: false
        description: Docker build target

      dockerfile:
        type: string
        default: Dockerfile
        description: Dockerfile path

      build-args:
        type: string
        required: false
        description: Additional Docker build arguments

      push:
        type: boolean
        default: true
        description: Whether to push the image

      os:
        type: string
        default: ubuntu-latest
        description: OS runner

      gen-cache-key:
        type: string
        required: false
        description: Optional key for generated build cache

      gen-cache-path:
        type: string
        required: false
        description: Directory to restore cache to

      workload-identity-provider:
        type: string
        required: false
        description: GCP Workload Identity Provider

      service-account:
        type: string
        required: false
        description: GCP Service Account email

      slack-channel:
        type: string
        required: false
        description: Slack channel to post updates

      slack-thread-ts:
        type: string
        required: false
        description: Slack thread timestamp

      fetch-depth:
        type: number
        default: 1
        description: Git fetch depth for checkout

    outputs:
      image:
        description: Full path of the built image
        value: ${{ jobs.build-and-push.outputs.image }}

    secrets:
      build-secrets:
        required: false
      ssh-private-key:
        required: false
      deploy_user_ssh_key:
        required: false
      gar_service_account_key:
        required: false
      slack-token:
        required: false

jobs:
  build-and-push:
    runs-on: ${{ inputs.os }}
    env:
      WORKLOAD_IDENTITY_PROVIDER: ${{ inputs.workload-identity-provider }}
      SERVICE_ACCOUNT: ${{ inputs.service-account }}
      SSH_PRIVATE_KEY: ${{ secrets.ssh-private-key }}
      DEPLOY_USER_SSH_KEY: ${{ secrets.deploy_user_ssh_key }}
      REPOSITORY: ${{ inputs.repository }}
      REPO: ${{ inputs.repo }}

    outputs:
      image: ${{ steps.compute_hash.outputs.image }}

    steps:
      - name: Set Variables
        run: |
          set -euo pipefail
          if [ -n "$WORKLOAD_IDENTITY_PROVIDER" ] && [ -n "$SERVICE_ACCOUNT" ]; then
            echo "use_workload_identity=true" >> "$GITHUB_ENV"
          else
            echo "use_workload_identity=false" >> "$GITHUB_ENV"
          fi

          if [ -z "$SSH_PRIVATE_KEY" ] && [ -n "$DEPLOY_USER_SSH_KEY" ]; then
            echo "use_deprecated_ssh_var=true" >> "$GITHUB_ENV"
          elif [ -z "$SSH_PRIVATE_KEY" ] && [ -z "$DEPLOY_USER_SSH_KEY" ]; then
            echo "❌ ssh-private-key or deploy_user_ssh_key must be set." >&2
            exit 1
          else
            echo "use_deprecated_ssh_var=false" >> "$GITHUB_ENV"
          fi

          if [ -z "$REPOSITORY" ] && [ -n "$REPO" ]; then
            echo "REPOSITORY=$(echo "$REPO" | tr -d '\n\r')" >> "$GITHUB_ENV"
          elif [ -z "$REPOSITORY" ] && [ -z "$REPO" ]; then
            echo "❌ repository or repo must be set." >&2
            exit 1
          fi

      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.use_deprecated_ssh_var == 'true' && secrets.deploy_user_ssh_key || secrets.ssh-private-key }}

      - name: Update Git config
        run: |
          mkdir -p ~/.ssh
          curl -sL https://api.github.com/meta | jq -r '.ssh_keys[]' | sed 's/^/github.com /' >> ~/.ssh/known_hosts
          git config --global url."git@github.com:".insteadOf "https://github.com/"

      - if: ${{ inputs.gen-cache-key && inputs.gen-cache-path }}
        uses: actions/cache@v4
        with:
          key: ${{ inputs.gen-cache-key }}
          path: ${{ inputs.gen-cache-path }}

      - uses: docker/setup-buildx-action@v3

      - name: Authenticate with Google Cloud (Service Account Key)
        if: env.use_workload_identity == 'false'
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.gar_service_account_key }}

      - name: Docker login (Google Credential file)
        if: env.use_workload_identity == 'false'
        run: |
          docker login -u _json_key --password-stdin ${{ inputs.registry }} < "${{ steps.auth.outputs.credentials_file_path }}"

      - name: Authenticate with Google Cloud (Workload Identity)
        id: auth_with_workload_identity
        if: env.use_workload_identity == 'true'
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ inputs.workload-identity-provider }}
          service_account: ${{ inputs.service-account }}

      - name: Docker login (Google oauth2accesstoken)
        if: env.use_workload_identity == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: oauth2accesstoken
          password: ${{ steps.auth_with_workload_identity.outputs.access_token }}

      - name: Compute hash and check if image exists
        id: compute_hash
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          EXCLUDES="**/*.md,.git/*,gha-creds*,.deploy,nomad.hcl,*nomad.variables.hcl"

          shopt -s globstar extglob nullglob
          FIND_CMD=(find . -type f)

          IFS=',' read -ra PATTERNS <<<"$EXCLUDES"
          for pattern in "${PATTERNS[@]}"; do
              pattern=$(echo "$pattern" | xargs)
              [[ -n $pattern ]] && FIND_CMD+=(! -path "./$pattern")
          done

          TAG=$("${FIND_CMD[@]}" -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          IMAGE="${{ inputs.registry }}/${{ inputs.project }}/${{ env.REPOSITORY }}/${{ inputs.image }}:${TAG}"

          if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
              echo "✅ Image $IMAGE already exists - skipping build"
              EXISTS="true"
          else
              echo "🚀 Image $IMAGE not found — proceed to build"
              EXISTS="false"
          fi

          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "image=${IMAGE}" >> "$GITHUB_ENV"
          echo "image_exists=${EXISTS}" >> "$GITHUB_ENV"
          echo "tag=${TAG}" >> "$GITHUB_ENV"

      - name: Print results
        run: |
          echo "Computed image: ${{ env.image }}"
          echo "Image exists: ${{ env.image_exists }}"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.image }}
          tags: |
            type=sha
            value=${{ inputs.tag }}

      - name: Build (and push) Docker image
        uses: docker/build-push-action@v5
        if: env.image_exists == 'false'
        with:
          context: ${{ inputs.context }}
          push: ${{ inputs.push }}
          file: ${{ inputs.dockerfile }}
          secrets: ${{ secrets.build-secrets }}
          build-args: |
            ${{ inputs.build-args }}
            CI_COMMIT=${{ github.sha }}
            CI_REPO=${{ github.event.repository.name }}
            CI_NUM=${{ github.run_id }}
            BUILD_COMMIT=${{ github.sha }}
            BUILD_REPO=${{ github.event.repository.name }}
            BUILD_ID=${{ github.run_id }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.image }}
          labels: ${{ steps.meta.outputs.labels }}
          target: ${{ inputs.target }}
          ssh: default
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify Slack
        if: ${{ always() && inputs.slack-thread-ts != '' }}
        uses: remerge/action-slack-deploy-pipeline@v2.0.0-remerge
        with:
          token: ${{ secrets.slack-token }}
          channel: ${{ inputs.slack-channel }}
          thread_ts: ${{ inputs.slack-thread-ts }}
